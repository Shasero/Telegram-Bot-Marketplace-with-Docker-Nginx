import logging
import json
import os
import time
import transliterate
from datetime import datetime, timezone
from logging.handlers import RotatingFileHandler

from aiogram import F, Router, html, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import keyboards.keyboard as kb
import database.requests as rq

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "level": record.levelname,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "user_id": getattr(record, 'user_id', None),
            "extra": getattr(record, 'extra', {})
        }
        if record.exc_info:
            log_record["exception"] = self.formatException(record.exc_info)
        return json.dumps(log_record, ensure_ascii=False)

def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)

    os.makedirs('logs', exist_ok=True)
    
    file_handler = RotatingFileHandler(
        'logs/handler_output_data.log',
        maxBytes=10*1024*1024,
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(JsonFormatter())
    
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(JsonFormatter())
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger

logger = setup_logger()

router = Router()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_action(func):
    async def wrapper(*args, **kwargs):
        filtered_kwargs = {k: v for k, v in kwargs.items() if k in func.__annotations__}
        message_or_callback = args[0]
        user_id = getattr(message_or_callback.from_user, 'id', None)
        extra = {'user_id': user_id}
        
        logger.info(f"Start {func.__name__}", extra={'extra': extra})
        start_time = time.time()
        
        try:
            result = await func(*args, **filtered_kwargs)
            exec_time = time.time() - start_time
            logger.info(f"Completed {func.__name__} in {exec_time:.2f}s",
                      extra={'extra': {**extra, 'exec_time': exec_time}})
            return result
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}", exc_info=True,
                       extra={'extra': extra})
            raise
    return wrapper

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserSelectionStates(StatesGroup):
    waiting_for_selection = State()
    selected_gaid = State()
    selected_kurs = State()

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
class OutputDataHandler:
    def __init__(self, data_type: str):
        self.data_type = data_type
        self.data_file = f"{data_type}_data.json"
        
    def transliterate_filename(self, filename):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
        try:
            return transliterate.translit(filename, 'ru', reversed=True)
        except transliterate.exceptions.TranslitException:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é '{filename}'")
            return filename
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        if os.path.exists(self.data_file):
            with open(self.data_file, "r", encoding='utf-8') as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ {self.data_file}")
                    return {}
        return {}
    
    def save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
        with open(self.data_file, "w", encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    
    async def start(self, message: Message, bot: Bot):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏."""
        check_func = getattr(rq, f'proverka_{self.data_type}s')
        if await check_func() is None:
            logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {self.data_type}–æ–≤")
            data_name = "–≥–∞–π–¥" if self.data_type == "gaid" else "–∫—É—Ä—Å"
            await bot.send_message(message.from_user.id, f'–ü–æ–∫–∞ {data_name}–æ–≤ –Ω–µ—Ç')
        else:
            try:
                keyboard_func = getattr(kb, f'selectkeyboard{self.data_type}')
                data_name = "–≥–∞–π–¥" if self.data_type == "gaid" else "–∫—É—Ä—Å"
                await bot.send_message(
                    message.from_user.id,
                    f'üìñ{data_name.capitalize()}—ã: ' if self.data_type == 'gaid' else f'ü§ì{data_name.capitalize()}—ã: ',
                    reply_markup=await keyboard_func()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ {e}")
            
    async def select(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        await callback.answer('')

        if not hasattr(callback, 'from_user') or not callback.from_user:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback")
            return

        user_name = callback.from_user.full_name
        admin_id = os.getenv('ADMIN_ID')
        selection_id = callback.data.split('_')[1] 
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            selection_id=selection_id,
            user_id=callback.from_user.id,
            user_name=user_name,
            admin_id=admin_id,
            data_type=self.data_type
        )

        if self.data_type == 'gaid':
            await state.set_state(UserSelectionStates.selected_gaid)
        else:
            await state.set_state(UserSelectionStates.selected_kurs)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        data = self.load_data()
        if str(user_name) not in data:
            data[str(user_name)] = []
        
        get_func = getattr(rq, f'get_{self.data_type}')
        items = await get_func(selection_id)
        if not items:
            await logger.error("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        for item in items:
            transliterated_name = self.transliterate_filename(
                item.name_fail_gaid if self.data_type == 'gaid' else item.name_fail_kurs
            )
            
            if transliterated_name not in data[str(user_name)]:
                data[str(user_name)].append(transliterated_name)
        
        self.save_data(data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        for item in items:
            photo_field = getattr(item, f'photo_{self.data_type}')
            name_field = getattr(item, f'name_fail_{self.data_type}')
            description_field = getattr(item, f'description_{self.data_type}')
            price_star_field = getattr(item, f'price_star_{self.data_type}')


            await callback.message.answer_photo(photo_field)
            await callback.message.answer(
                f'{html.bold("–ì–∞–π–¥:" if self.data_type == "gaid" else "–ö—É—Ä—Å:")} {name_field}\n\n'
                f'{html.bold("–û–ø–∏—Å–∞–Ω–∏–µ:")} {description_field}\n\n\n'
                f'{html.bold("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö:")} {price_star_field}',
                reply_markup=getattr(kb, f'payment_keyboard_{self.data_type}')
            )
    
    async def buy_with_stars(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫—É–ø–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–≤–µ–∑–¥."""
        data = await state.get_data()
        selection_id = data.get('selection_id')
        
        if not selection_id:
            await logger.error("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç")
            return
            
        get_func = getattr(rq, f'get_{self.data_type}')
        items = await get_func(selection_id)
        
        for item in items:
            name_field = getattr(item, f'name_fail_{self.data_type}')
            description_field = getattr(item, f'description_{self.data_type}')
            price_star_field = getattr(item, f'price_star_{self.data_type}')
            
            await callback.message.answer_invoice(
                title=name_field,
                description=description_field,
                provider_token='',
                currency="XTR",
                payload=self.data_type,
                prices=[LabeledPrice(label="XTR", amount=price_star_field)]
            )
        await callback.answer()
    
    async def successful_payment(self, message: Message, bot: Bot, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
        data = await state.get_data()
        selection_id = data.get('selection_id')
        
        if not selection_id:
            await logger.error("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç")
            return
            
        get_func = getattr(rq, f'get_{self.data_type}')
        items = await get_func(selection_id)
        
        for item in items:
            file_field = getattr(item, f'fail_{self.data_type}')
            await bot.send_document(
                chat_id=message.from_user.id,
                document=file_field,
                caption=f"{'–ì–∞–π–¥' if self.data_type == 'gaid' else '–ö—É—Ä—Å'}: {getattr(item, f'name_fail_{self.data_type}')}"
            )

        await state.clear()    
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
gaid_handler = OutputDataHandler('gaid')
kurs_handler = OutputDataHandler('kurs')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥–∞–π–¥–æ–≤
@router.message(Command(commands='gaid'))
@log_user_action
async def gaid_start(message: Message, bot: Bot):
    await gaid_handler.start(message, bot)

@router.callback_query(F.data.startswith('selectgaid_'))
@log_user_action
async def gaid_select(callback: CallbackQuery, state: FSMContext):
    await gaid_handler.select(callback, state)

@router.callback_query(F.data.startswith('stars_gaid'))
@log_user_action
async def buy_gaid(callback: CallbackQuery, state: FSMContext):
    await gaid_handler.buy_with_stars(callback, state)

@router.pre_checkout_query()
@log_user_action
async def pre_checkout_query_gaid(event: PreCheckoutQuery) -> None:
    await event.answer(ok=True)

@router.message(F.successful_payment.invoice_payload == 'gaid')
@log_user_action
async def successful_payment_gaid(message: Message, bot: Bot, state: FSMContext):
    await gaid_handler.successful_payment(message, bot, state)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫—É—Ä—Å–æ–≤
@router.message(Command(commands='kurs'))
@log_user_action
async def kurs_start(message: Message, bot: Bot):
    await kurs_handler.start(message, bot)

@router.callback_query(F.data.startswith('selectkurs_'))
@log_user_action
async def kurs_select(callback: CallbackQuery, state: FSMContext):
    await kurs_handler.select(callback, state)

@router.callback_query(F.data.startswith('stars_kurs'))
@log_user_action
async def buy_kurs(callback: CallbackQuery, state: FSMContext):
    await kurs_handler.buy_with_stars(callback, state)

@router.message(F.successful_payment.invoice_payload == 'kurs')
@log_user_action
async def successful_payment_kurs(message: Message, bot: Bot, state: FSMContext):
    await kurs_handler.successful_payment(message, bot, state)


@router.message(Command(commands=['gaid', 'kurs']))
async def cancel_any_state(message: Message, state: FSMContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ {message.text}")
    if message.text == '/gaid':
        await gaid_start(message, Bot.get_current())
    elif message.text == '/kurs':
        await kurs_start(message, Bot.get_current())